#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<int>seg;

int build(int ind,int low,int high,int arr[])
{
    //base case
    if(low==high)
    {
        seg[ind]=arr[low];
        return arr[low];
    }
    
    //finding middle element
    int mid=(low+high)>>1;
    int left=build(2*ind+1,low,mid,arr);
    int right=build(2*ind+2,mid+1,high,arr);
    
    seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    return seg[ind];
}

int update(int ind,int low,int high,int i,int val,int arr[])
{
    //base case
    if(low==high && i==low)
    {
        seg[ind]=val;
        arr[i]=val;
        return seg[ind];
    }
    
    int mid=(low+high)>>1;

    if(i<=mid)
    {
        int left=update(2*ind+1,low,mid,i,val,arr);
        seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    }
    else
    {
        int right=update(2*ind+2,mid+1,high,i,val,arr);
        seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    }
    
    return seg[ind];
}


int query(int ind,int low,int high,int arr[],int l,int r)
{
    //base case -> 3 cases
    
    // 1. no overlapping
    // low high l r   or   l r low high
    if(high < l || low > r)return INT_MAX;
    
    // 2. complete overlapping
    else if(low>=l && high<=r)
    {
        return seg[ind];
    }
    
    // 3. partial overlapping
    else
    {
        int mid=(low+high)>>1;
        int left=query(2*ind+1,low,mid,arr,l,r);
        int right=query(2*ind+2,mid+1,high,arr,l,r);
        return seg[ind]=min(left,right);
    }
}


int main() {
    
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    seg.resize(4*n+1);
    build(0,0,n-1,arr); // ind,l,r,arr[]
    
    int q;
    cin>>q;
    
    while(q--)
    {
        int type;
        cin>>type;
        if(type==1) // for finding minimum element between index l and r i.e             [l,r]
        {
            int l,r;
            cin>>l>>r;
            cout<<query(0,0,n-1,arr,l,r)<<endl;
        }
        else //type=2 -> for updating arr at index i and also updating segment tree
        {
            int i,val;
            cin>>i>>val;
            update(0,0,n-1,i,val,arr);
            arr[i]=val;
        }
    }
    
    return 0;
}
